"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _types=require("../types");const isNumberTypeRegex=/^(?:integer|number)$/,ASSERT_MAX=Symbol("validates Number maximum"),ASSERT_MIN=Symbol("validates Number minimum"),ASSERT_MULTIPLE=Symbol("validates Number multipleOf");class AssertNumber{constructor(){return AssertNumber}static optimize(e){const{type:i,exclusiveMaximum:m,exclusiveMinimum:t,maximum:s,minimum:u,multipleOf:r}=e,o="integer"===i?_types.isInteger:_types.isNumber;(0,_types.isUndefined)(s)||AssertNumber[ASSERT_MAX](o,s,m);(0,_types.isUndefined)(u)||AssertNumber[ASSERT_MIN](o,u,t);(0,_types.isUndefined)(r)||AssertNumber[ASSERT_MULTIPLE](o,r);return(0,_types.isNumber)(s)||(0,_types.isNumber)(m)||(0,_types.isNumber)(u)||(0,_types.isNumber)(t)||(0,_types.isNumber)(r)?[(e,i)=>o(e)?"number"==typeof i.maximum&&(i.exclusiveMaximum&&e>=i.maximum||e>i.maximum)?`#maximum: ${e} is greater than or equal to ${i.maximum}`:"number"==typeof i.exclusiveMaximum&&e>=i.exclusiveMaximum?`#exclusiveMaximum: ${e} is greater than or equal to ${i.exclusiveMaximum}`:"number"==typeof i.minimum&&(i.exclusiveMinimum&&e<=i.minimum||e<i.minimum)?`#minimum: ${e} is less than or equal to ${i.minimum}`:"number"==typeof i.exclusiveMinimum&&e<=i.exclusiveMinimum?`#exclusiveMinimum: ${e} is less than or equal to ${i.exclusiveMinimum}`:"number"==typeof i.multipleOf&&e/i.multipleOf%1!=0?`#multipleOf: ${e} is not a multiple of ${i.multipleOf}`:void 0:isNumberTypeRegex.test(i.type)?`#type: value is not a(n) ${i.type}`:void 0]:i&&-1!==o.name.search(new RegExp(i,"i"))?[(e,i)=>{if(!o(e))return`#type: value is not a(n) ${i.type}`}]:[]}static[ASSERT_MAX](e,i,m=!1){(0,_types.isNumber)(m)&&(m=!1);if(!e(i))throw new TypeError("#maximum: keyword is not the right type");if(!(0,_types.isBoolean)(m))throw new TypeError("#exclusiveMaximum: keyword is not a boolean")}static[ASSERT_MIN](e,i,m=!1){(0,_types.isNumber)(m)&&(m=!1);if(!e(i))throw new TypeError("#minimum: keyword is not the right type");if(!(0,_types.isBoolean)(m))throw new TypeError("#exclusiveMinimum: keyword is not a boolean")}static[ASSERT_MULTIPLE](e,i){if(!e(i))throw new TypeError("#multipleOf: keyword is not the right type")}}exports.default=AssertNumber;module.exports=exports.default;
