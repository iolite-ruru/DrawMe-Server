# -*- coding: utf-8 -*-
"""img.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSFMNfEx3b5-XH585gV_GcpULmj5Bhxw
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.applications import MobileNet
from tensorflow.keras import optimizers


import numpy as np
import matplotlib.image as mpimg
import matplotlib.pyplot as plt


#train data set
train_datagen = ImageDataGenerator(rescale=1./255,
                                   horizontal_flip=True,
                                   width_shift_range=0.1,
                                   height_shift_range=0.1,
                                   rotation_range=5,
                                   shear_range=0.7,
                                   zoom_range=[0.9, 2.2],
                                   vertical_flip=True)

train_generator = train_datagen.flow_from_directory(
    './TestDataset/train',
    target_size=(224,224),
    batch_size=5,
    color_mode='rgb',
    subset='training',
    class_mode='categorical'
)

#test data set
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    './TestDataset/test',
    target_size=(224,224),
    batch_size=5,
    color_mode='rgb',
    class_mode='categorical'
)

train_generator.class_indices
# base_model = MobileNet(weights='imagenet', include_top=False, input_shape=(150,150,3))

class_names = ['cat', 'dog', 'rabbit']

#모델 구조
model = Sequential()
# model.add(base_model)
model.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3))) #컨볼루션 층 추가   #1->3으로 수정하니 해당 에러 해결됨 #channels?? 3?????
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32, (3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64, (3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten(input_shape=(224, 224)))
# model.add(Dense(64))
# model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(3, activation='softmax')) #출력층 노드 갯수 = 종류 수
#꼭 softmax여야 함~ sigmoid=이분법



#모델 실행 환경
model.compile(loss='mse', #categorical_crossentropy
              optimizer='adam', #SGD
              metrics=['accuracy'])

from gc import callbacks
earlystopping = EarlyStopping(monitor='loss', patience=5) #val_loss

history = model.fit(
    train_generator,
    epochs=45
    # batch_size=5
    # validation_data = test_generator,
    # validation_steps=3,
    # callbacks=[earlystopping]
)

# np.set_printoptions(formatter={'float': lambda x: "{0:0.3f}".format(x)})
# output = model.predict_generator(test_generator, steps=5)
# print(test_generator.class_indices)
# print(output[1])

# o = model.predict(test_generator, steps=5)
# o

print(history.history['accuracy'])

# converter = tf.lite.TFLiteConverter.from_keras_model(model)
# tflite_model = converter.convert()
# open('converted_model.tflite', 'wb').write(tflite_model)

from tensorflow.keras.preprocessing import image
from keras.applications.imagenet_utils import preprocess_input

img = image.load_img('./TestDataset/test/rabbit/rabbit18.jpg', target_size=(224, 224))
img_array = image.img_to_array(img)
img_batch = np.expand_dims(img_array, axis=0)
img_preprocessed = preprocess_input(img_batch)
np.set_printoptions(suppress=True)

## 0 / 1밖에 안 나옴 => 원 핫 인코딩 때문?? ㅇㅇ => 결과가 극단적인데?? => 모델 또 하나 생성하자
probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])
prediction = probability_model.predict(img_preprocessed/255)


print(prediction)
# np.argmax(prediction)
# prediction[0][0]

# img = image.load_img('./TestDataset/test/dog/dog19.jpg', target_size=(224, 224))
# img_array = image.img_to_array(img)
# img_batch = np.expand_dims(img_array, axis=0)
# img_preprocessed = preprocess_input(img_batch)
# np.set_printoptions(suppress=True)
# res = model.evaluate (img_preprocessed/255)
# res

# img_array
# img_batch
# img_preprocessed
# prediction

# import tensorflowjs as tfjs
# tfjs.converters.save_keras_model(model, './')
